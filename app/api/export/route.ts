import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export async function POST(request: NextRequest) {
  const session = await getServerSession(authOptions);
  
  if (!session?.user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { format, title, content, slug } = await request.json();

    let fileContent: string;
    let fileName: string;
    let contentType: string;

    switch (format) {
      case 'pdf':
        fileContent = generatePDFContent(title, content);
        fileName = `${slug}.html`;
        contentType = 'text/html';
        break;
      
      case 'md':
        fileContent = generateMarkdownContent(title, content);
        fileName = `${slug}.md`;
        contentType = 'text/plain';
        break;
      
      case 'html':
        fileContent = generateHTMLContent(title, content);
        fileName = `${slug}.html`;
        contentType = 'text/html';
        break;
      
      case 'docx':
        fileContent = generateDocxContent(title, content);
        fileName = `${slug}.html`;
        contentType = 'text/html';
        break;
      
      default:
        return NextResponse.json({ error: 'Unsupported format' }, { status: 400 });
    }

    // Create response with file content
    const response = new NextResponse(fileContent, {
      status: 200,
      headers: {
        'Content-Type': contentType,
        'Content-Disposition': `attachment; filename="${fileName}"`,
      },
    });

    return response;
  } catch (error) {
    console.error('Export error:', error);
    return NextResponse.json({ error: 'Failed to export document' }, { status: 500 });
  }
}

function generatePDFContent(title: string, content: string): string {
  const cleanContent = content
    .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
    .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
    .replace(/console\.log\([^)]*\)/g, '')
    .replace(/console\.warn\([^)]*\)/g, '')
    .replace(/console\.error\([^)]*\)/g, '');
    
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            color: #333;
        }
        h1 {
            color: #2563eb;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }
        h2 {
            color: #374151;
            margin-top: 40px;
            margin-bottom: 20px;
        }
        h3 {
            color: #4b5563;
            margin-top: 30px;
            margin-bottom: 15px;
        }
        p {
            margin-bottom: 16px;
        }
        code {
            background-color: #f3f4f6;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
        }
        pre {
            background-color: #f9fafb;
            padding: 16px;
            border-radius: 8px;
            overflow-x: auto;
            border: 1px solid #e5e7eb;
        }
        blockquote {
            border-left: 4px solid #3b82f6;
            padding-left: 16px;
            margin: 20px 0;
            color: #6b7280;
        }
        ul, ol {
            margin-bottom: 16px;
            padding-left: 24px;
        }
        li {
            margin-bottom: 8px;
        }
        .footer {
            margin-top: 60px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            text-align: center;
            color: #6b7280;
            font-size: 14px;
        }
        @media print {
            body {
                padding: 0;
                margin: 20px;
            }
        }
    </style>
</head>
<body>
    <h1>${title}</h1>
    <div class="content">
        ${cleanContent}
    </div>
    <div class="footer">
        <p>Generated by DocStart - ${new Date().toLocaleDateString()}</p>
    </div>
</body>
</html>
  `;
}

function generateMarkdownContent(title: string, content: string): string {
  const cleanContent = content
    .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
    .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
    .replace(/console\.log\([^)]*\)/g, '')
    .replace(/console\.warn\([^)]*\)/g, '')
    .replace(/console\.error\([^)]*\)/g, '');
    
  const markdownContent = cleanContent
    .replace(/<h1[^>]*>(.*?)<\/h1>/gi, '# $1\n')
    .replace(/<h2[^>]*>(.*?)<\/h2>/gi, '## $1\n')
    .replace(/<h3[^>]*>(.*?)<\/h3>/gi, '### $1\n')
    .replace(/<p[^>]*>(.*?)<\/p>/gi, '$1\n\n')
    .replace(/<strong[^>]*>(.*?)<\/strong>/gi, '**$1**')
    .replace(/<em[^>]*>(.*?)<\/em>/gi, '*$1*')
    .replace(/<code[^>]*>(.*?)<\/code>/gi, '`$1`')
    .replace(/<pre[^>]*><code[^>]*>([\s\S]*?)<\/code><\/pre>/gi, '```\n$1\n```\n')
    .replace(/<ul[^>]*>([\s\S]*?)<\/ul>/gi, '$1')
    .replace(/<ol[^>]*>([\s\S]*?)<\/ol>/gi, '$1')
    .replace(/<li[^>]*>(.*?)<\/li>/gi, '- $1\n')
    .replace(/<blockquote[^>]*>(.*?)<\/blockquote>/gi, '> $1\n')
    .replace(/<a[^>]*href="([^"]*)"[^>]*>(.*?)<\/a>/gi, '[$2]($1)')
    .replace(/<[^>]*>/g, '')
    .replace(/\n\s*\n\s*\n/g, '\n\n')
    .trim();

  return `# ${title}

${markdownContent}

---
*Generated by DocStart on ${new Date().toLocaleDateString()}*
`;
}

function generateHTMLContent(title: string, content: string): string {
  const cleanContent = content
    .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
    .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
    .replace(/console\.log\([^)]*\)/g, '')
    .replace(/console\.warn\([^)]*\)/g, '')
    .replace(/console\.error\([^)]*\)/g, '');
    
  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            color: #333;
        }
        h1, h2, h3 {
            color: #2563eb;
        }
        code {
            background-color: #f3f4f6;
            padding: 2px 6px;
            border-radius: 4px;
        }
        pre {
            background-color: #f9fafb;
            padding: 16px;
            border-radius: 8px;
            overflow-x: auto;
        }
        blockquote {
            border-left: 4px solid #3b82f6;
            padding-left: 16px;
            margin: 20px 0;
            color: #6b7280;
        }
    </style>
</head>
<body>
    <h1>${title}</h1>
    ${cleanContent}
    <hr>
    <p><em>Generated by DocStart on ${new Date().toLocaleDateString()}</em></p>
</body>
</html>
  `;
}

function generateDocxContent(title: string, content: string): string {
  const cleanContent = content
    .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
    .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
    .replace(/console\.log\([^)]*\)/g, '')
    .replace(/console\.warn\([^)]*\)/g, '')
    .replace(/console\.error\([^)]*\)/g, '');
    
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body {
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #2563eb;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 10px;
        }
        h2, h3 {
            color: #374151;
            margin-top: 30px;
        }
        code {
            background-color: #f3f4f6;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }
        pre {
            background-color: #f9fafb;
            padding: 16px;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }
        blockquote {
            border-left: 4px solid #3b82f6;
            padding-left: 16px;
            margin: 20px 0;
            color: #6b7280;
        }
    </style>
</head>
<body>
    <h1>${title}</h1>
    ${cleanContent}
    <hr>
    <p><em>Generated by DocStart on ${new Date().toLocaleDateString()}</em></p>
</body>
</html>
  `;
} 