 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Added back for credentials provider
  resetToken    String?   // For password reset
  resetTokenExpiry DateTime? // For password reset
  customerId    String?   @unique
  notionAccessToken String? @db.Text // Notion OAuth access token
  notionWorkspaceId String? // Notion workspace ID
  notionBotId       String? // Notion bot ID
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  memberships   ProjectMember[]
  documents     Document[]
  activities    Activity[]
  comments      Comment[]
  documentVersions DocumentVersion[]
  socialPosts   SocialPost[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  documents   Document[]
  members     ProjectMember[]
  activities  Activity[]

  @@index([userId])
  @@index([slug])
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("MEMBER") // OWNER, ADMIN, MEMBER, VIEWER
  createdAt DateTime @default(now())
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model Document {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  slug          String
  isPublished   Boolean  @default(false)
  versionCount  Int      @default(0)
  notionPageId  String?  // Notion page ID for syncing
  notionPageUrl String?  // Direct URL to Notion page
  lastSyncedAt  DateTime? // Last sync from Notion
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectId     String
  userId        String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  versions      DocumentVersion[]
  comments      Comment[]
  activities    Activity[]
  socialPosts   SocialPost[]

  @@unique([projectId, slug])
  @@index([projectId])
  @@index([userId])
  @@index([slug])
}

model DocumentVersion {
  id           String   @id @default(cuid())
  title        String
  content      String   @db.Text
  versionNumber Int
  createdAt    DateTime @default(now())
  documentId   String
  userId       String
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  lineNumber Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  documentId String
  userId     String
  parentId   String?
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")

  @@index([documentId])
  @@index([userId])
  @@index([parentId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String   // PROJECT_CREATED, PROJECT_UPDATED, DOCUMENT_CREATED, DOCUMENT_UPDATED, DOCUMENT_PUBLISHED, COMMENT_ADDED, MEMBER_ADDED, MEMBER_REMOVED
  metadata  Json?
  createdAt DateTime @default(now())
  userId    String
  projectId String?
  documentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  document  Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([documentId])
  @@index([createdAt])
}

model SocialPost {
  id           String   @id @default(cuid())
  documentId   String
  platform     String   // twitter, linkedin, facebook, instagram
  content      String
  scheduledTime DateTime?
  status       String   @default("draft") // draft, scheduled, published, failed
  publishedAt  DateTime?
  error        String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
  @@index([status])
}